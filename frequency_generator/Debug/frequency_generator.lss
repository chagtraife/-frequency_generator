
frequency_generator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000898  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e2  00800060  00000898  0000092c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000267  00800142  00800142  00000a0e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a0e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a40  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c68  00000000  00000000  00000b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000065b  00000000  00000000  00001774  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000787  00000000  00000000  00001dcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001dc  00000000  00000000  00002558  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000588  00000000  00000000  00002734  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000737  00000000  00000000  00002cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000033f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	3c c3       	rjmp	.+1656   	; 0x68a <__vector_8>
  12:	18 c3       	rjmp	.+1584   	; 0x644 <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	11 e0       	ldi	r17, 0x01	; 1
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 e9       	ldi	r30, 0x98	; 152
  3a:	f8 e0       	ldi	r31, 0x08	; 8
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a2 34       	cpi	r26, 0x42	; 66
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	23 e0       	ldi	r18, 0x03	; 3
  4a:	a2 e4       	ldi	r26, 0x42	; 66
  4c:	b1 e0       	ldi	r27, 0x01	; 1
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a9 3a       	cpi	r26, 0xA9	; 169
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	e7 d2       	rcall	.+1486   	; 0x628 <main>
  5a:	1c c4       	rjmp	.+2104   	; 0x894 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <_Z8init_TC0v>:
    }
}

void init_TC0(void)
{
	TIMSK |= (1 << TOIE0);        // interrupt enable - here overflow
  5e:	89 b7       	in	r24, 0x39	; 57
  60:	81 60       	ori	r24, 0x01	; 1
  62:	89 bf       	out	0x39, r24	; 57
	TCCR0 |= TIMER0_PRESCALER;    // use defined prescaler value
  64:	83 b7       	in	r24, 0x33	; 51
  66:	83 60       	ori	r24, 0x03	; 3
  68:	83 bf       	out	0x33, r24	; 51
  6a:	08 95       	ret

0000006c <_Z8init_TC1v>:
void init_TC1(void)
{
	// this code sets up counter1 for an 39,8kHz, Fast PWM
	// @ 8Mhz Clock

	TIMSK |= (1 << TOIE1);
  6c:	89 b7       	in	r24, 0x39	; 57
  6e:	84 60       	ori	r24, 0x04	; 4
  70:	89 bf       	out	0x39, r24	; 57
	ICR1 = 0x00C8;
  72:	88 ec       	ldi	r24, 0xC8	; 200
  74:	90 e0       	ldi	r25, 0x00	; 0
  76:	97 bd       	out	0x27, r25	; 39
  78:	86 bd       	out	0x26, r24	; 38
	OCR1A = 0x000C;
  7a:	8c e0       	ldi	r24, 0x0C	; 12
  7c:	90 e0       	ldi	r25, 0x00	; 0
  7e:	9b bd       	out	0x2b, r25	; 43
  80:	8a bd       	out	0x2a, r24	; 42
		
	TCCR1A |= (1 << COM1A1);    // set none-inverting mode
  82:	8f b5       	in	r24, 0x2f	; 47
  84:	80 68       	ori	r24, 0x80	; 128
  86:	8f bd       	out	0x2f, r24	; 47
	
	//Mode 14: Fast PWM
	// TOP: ICR1
	// PWM_fequency = clock_speed / [Prescaller_value * (1 + TOP_Value) ]
	TCCR1A |= (1 << WGM11);    
  88:	8f b5       	in	r24, 0x2f	; 47
  8a:	82 60       	ori	r24, 0x02	; 2
  8c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM13) | (1 << WGM12);
  8e:	8e b5       	in	r24, 0x2e	; 46
  90:	88 61       	ori	r24, 0x18	; 24
  92:	8e bd       	out	0x2e, r24	; 46
		
	TCCR1B |= (1 << CS10); // No Prescaling
  94:	8e b5       	in	r24, 0x2e	; 46
  96:	81 60       	ori	r24, 0x01	; 1
  98:	8e bd       	out	0x2e, r24	; 46
  9a:	08 95       	ret

0000009c <_Z9init_GPIOv>:
}

void init_GPIO(void)
{
	//set RB1 as output
	DDRB |= (1 << DDRB1);	
  9c:	87 b3       	in	r24, 0x17	; 23
  9e:	82 60       	ori	r24, 0x02	; 2
  a0:	87 bb       	out	0x17, r24	; 23
	//set RC0, RC1, RC2, RC3 as output
	DDRC |= 0x0F;
  a2:	84 b3       	in	r24, 0x14	; 20
  a4:	8f 60       	ori	r24, 0x0F	; 15
  a6:	84 bb       	out	0x14, r24	; 20
	// set RDx as output
	DDRD = 0xFF;
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	81 bb       	out	0x11, r24	; 17
	
	//set PC4, PC5 as input
	DDRC &= ~((1 << DDRC5) | (1 << DDRC4));
  ac:	84 b3       	in	r24, 0x14	; 20
  ae:	8f 7c       	andi	r24, 0xCF	; 207
  b0:	84 bb       	out	0x14, r24	; 20
	PORTC |= (1 << PORTC5) | (1 << PORTC4);
  b2:	85 b3       	in	r24, 0x15	; 21
  b4:	80 63       	ori	r24, 0x30	; 48
  b6:	85 bb       	out	0x15, r24	; 21
  b8:	08 95       	ret

000000ba <_Z7displayv>:
	}
}

void display(void)
{
	PORTC |= 0x0F;
  ba:	85 b3       	in	r24, 0x15	; 21
  bc:	8f 60       	ori	r24, 0x0F	; 15
  be:	85 bb       	out	0x15, r24	; 21
	switch (digitIdx) {
  c0:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <digitIdx>
  c4:	82 30       	cpi	r24, 0x02	; 2
  c6:	d9 f0       	breq	.+54     	; 0xfe <_Z7displayv+0x44>
  c8:	18 f4       	brcc	.+6      	; 0xd0 <_Z7displayv+0x16>
  ca:	81 30       	cpi	r24, 0x01	; 1
  cc:	31 f0       	breq	.+12     	; 0xda <_Z7displayv+0x20>
  ce:	4e c0       	rjmp	.+156    	; 0x16c <_Z7displayv+0xb2>
  d0:	83 30       	cpi	r24, 0x03	; 3
  d2:	39 f1       	breq	.+78     	; 0x122 <_Z7displayv+0x68>
  d4:	84 30       	cpi	r24, 0x04	; 4
  d6:	b9 f1       	breq	.+110    	; 0x146 <_Z7displayv+0x8c>
  d8:	49 c0       	rjmp	.+146    	; 0x16c <_Z7displayv+0xb2>
		case 1: {
			PORTD = led7[digitVal_1];
  da:	e0 91 a8 03 	lds	r30, 0x03A8	; 0x8003a8 <digitVal_1>
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	e2 5d       	subi	r30, 0xD2	; 210
  e2:	fe 4f       	sbci	r31, 0xFE	; 254
  e4:	80 81       	ld	r24, Z
  e6:	82 bb       	out	0x12, r24	; 18
			if (pointIdx == 1){
  e8:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <pointIdx>
  ec:	81 30       	cpi	r24, 0x01	; 1
  ee:	19 f4       	brne	.+6      	; 0xf6 <_Z7displayv+0x3c>
				PORTD &= ~(1<<PORTD7);
  f0:	82 b3       	in	r24, 0x12	; 18
  f2:	8f 77       	andi	r24, 0x7F	; 127
  f4:	82 bb       	out	0x12, r24	; 18
			}
			PORTC &= ~(1<<PORTC3);
  f6:	85 b3       	in	r24, 0x15	; 21
  f8:	87 7f       	andi	r24, 0xF7	; 247
  fa:	85 bb       	out	0x15, r24	; 21
			break;
  fc:	37 c0       	rjmp	.+110    	; 0x16c <_Z7displayv+0xb2>
		}
		case 2: {
			PORTD = led7[digitVal_2];
  fe:	e0 91 a7 03 	lds	r30, 0x03A7	; 0x8003a7 <digitVal_2>
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	e2 5d       	subi	r30, 0xD2	; 210
 106:	fe 4f       	sbci	r31, 0xFE	; 254
 108:	80 81       	ld	r24, Z
 10a:	82 bb       	out	0x12, r24	; 18
			if (pointIdx == 2){
 10c:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <pointIdx>
 110:	82 30       	cpi	r24, 0x02	; 2
 112:	19 f4       	brne	.+6      	; 0x11a <_Z7displayv+0x60>
				PORTD &= ~(1<<PORTD7);
 114:	82 b3       	in	r24, 0x12	; 18
 116:	8f 77       	andi	r24, 0x7F	; 127
 118:	82 bb       	out	0x12, r24	; 18
			}
			PORTC &= ~(1<<PORTC2);
 11a:	85 b3       	in	r24, 0x15	; 21
 11c:	8b 7f       	andi	r24, 0xFB	; 251
 11e:	85 bb       	out	0x15, r24	; 21
			break;
 120:	25 c0       	rjmp	.+74     	; 0x16c <_Z7displayv+0xb2>
		}
		case 3: {
			PORTD = led7[digitVal_3];
 122:	e0 91 a6 03 	lds	r30, 0x03A6	; 0x8003a6 <digitVal_3>
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	e2 5d       	subi	r30, 0xD2	; 210
 12a:	fe 4f       	sbci	r31, 0xFE	; 254
 12c:	80 81       	ld	r24, Z
 12e:	82 bb       	out	0x12, r24	; 18
			if (pointIdx == 3){
 130:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <pointIdx>
 134:	83 30       	cpi	r24, 0x03	; 3
 136:	19 f4       	brne	.+6      	; 0x13e <_Z7displayv+0x84>
				PORTD &= ~(1<<PORTD7);
 138:	82 b3       	in	r24, 0x12	; 18
 13a:	8f 77       	andi	r24, 0x7F	; 127
 13c:	82 bb       	out	0x12, r24	; 18
			}
			PORTC &= ~(1<<PORTC1);
 13e:	85 b3       	in	r24, 0x15	; 21
 140:	8d 7f       	andi	r24, 0xFD	; 253
 142:	85 bb       	out	0x15, r24	; 21
			break;
 144:	13 c0       	rjmp	.+38     	; 0x16c <_Z7displayv+0xb2>
		}
		case 4: {
			if (digitVal_4 == 10) break;
 146:	e0 91 a5 03 	lds	r30, 0x03A5	; 0x8003a5 <digitVal_4>
 14a:	ea 30       	cpi	r30, 0x0A	; 10
 14c:	79 f0       	breq	.+30     	; 0x16c <_Z7displayv+0xb2>
			PORTD = led7[digitVal_4];
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	e2 5d       	subi	r30, 0xD2	; 210
 152:	fe 4f       	sbci	r31, 0xFE	; 254
 154:	80 81       	ld	r24, Z
 156:	82 bb       	out	0x12, r24	; 18
			if (pointIdx == 4){
 158:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <pointIdx>
 15c:	84 30       	cpi	r24, 0x04	; 4
 15e:	19 f4       	brne	.+6      	; 0x166 <_Z7displayv+0xac>
				PORTD &= ~(1<<PORTD7);
 160:	82 b3       	in	r24, 0x12	; 18
 162:	8f 77       	andi	r24, 0x7F	; 127
 164:	82 bb       	out	0x12, r24	; 18
			}
			PORTC &= ~(1<<PORTC0);		
 166:	85 b3       	in	r24, 0x15	; 21
 168:	8e 7f       	andi	r24, 0xFE	; 254
 16a:	85 bb       	out	0x15, r24	; 21
			break;
		}
	}
	
	if (digitIdx == 4) {
 16c:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <digitIdx>
 170:	84 30       	cpi	r24, 0x04	; 4
 172:	21 f4       	brne	.+8      	; 0x17c <_Z7displayv+0xc2>
		digitIdx = 1;
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <digitIdx>
 17a:	08 95       	ret
	} else {
		digitIdx++;
 17c:	8f 5f       	subi	r24, 0xFF	; 255
 17e:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <digitIdx>
 182:	08 95       	ret

00000184 <_Z10setDisplayjj>:
	}
}

void setDisplay(unsigned int number, unsigned int f)
{
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	ac 01       	movw	r20, r24
 18a:	fb 01       	movw	r30, r22
	digitVal_1 = number % 10;
 18c:	9c 01       	movw	r18, r24
 18e:	ad ec       	ldi	r26, 0xCD	; 205
 190:	bc ec       	ldi	r27, 0xCC	; 204
 192:	6a d3       	rcall	.+1748   	; 0x868 <__umulhisi3>
 194:	96 95       	lsr	r25
 196:	87 95       	ror	r24
 198:	96 95       	lsr	r25
 19a:	87 95       	ror	r24
 19c:	96 95       	lsr	r25
 19e:	87 95       	ror	r24
 1a0:	9c 01       	movw	r18, r24
 1a2:	22 0f       	add	r18, r18
 1a4:	33 1f       	adc	r19, r19
 1a6:	88 0f       	add	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	82 0f       	add	r24, r18
 1b4:	93 1f       	adc	r25, r19
 1b6:	9a 01       	movw	r18, r20
 1b8:	28 1b       	sub	r18, r24
 1ba:	39 0b       	sbc	r19, r25
 1bc:	20 93 a8 03 	sts	0x03A8, r18	; 0x8003a8 <digitVal_1>
	digitVal_2 = (number /10) % 10;
 1c0:	9a 01       	movw	r18, r20
 1c2:	52 d3       	rcall	.+1700   	; 0x868 <__umulhisi3>
 1c4:	ec 01       	movw	r28, r24
 1c6:	d6 95       	lsr	r29
 1c8:	c7 95       	ror	r28
 1ca:	d6 95       	lsr	r29
 1cc:	c7 95       	ror	r28
 1ce:	d6 95       	lsr	r29
 1d0:	c7 95       	ror	r28
 1d2:	9e 01       	movw	r18, r28
 1d4:	49 d3       	rcall	.+1682   	; 0x868 <__umulhisi3>
 1d6:	96 95       	lsr	r25
 1d8:	87 95       	ror	r24
 1da:	96 95       	lsr	r25
 1dc:	87 95       	ror	r24
 1de:	96 95       	lsr	r25
 1e0:	87 95       	ror	r24
 1e2:	9c 01       	movw	r18, r24
 1e4:	22 0f       	add	r18, r18
 1e6:	33 1f       	adc	r19, r19
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	88 0f       	add	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	82 0f       	add	r24, r18
 1f6:	93 1f       	adc	r25, r19
 1f8:	9e 01       	movw	r18, r28
 1fa:	28 1b       	sub	r18, r24
 1fc:	39 0b       	sbc	r19, r25
 1fe:	20 93 a7 03 	sts	0x03A7, r18	; 0x8003a7 <digitVal_2>
	digitVal_3 = (number /100) % 10;
 202:	9a 01       	movw	r18, r20
 204:	36 95       	lsr	r19
 206:	27 95       	ror	r18
 208:	36 95       	lsr	r19
 20a:	27 95       	ror	r18
 20c:	ab e7       	ldi	r26, 0x7B	; 123
 20e:	b4 e1       	ldi	r27, 0x14	; 20
 210:	2b d3       	rcall	.+1622   	; 0x868 <__umulhisi3>
 212:	ec 01       	movw	r28, r24
 214:	d6 95       	lsr	r29
 216:	c7 95       	ror	r28
 218:	9e 01       	movw	r18, r28
 21a:	ad ec       	ldi	r26, 0xCD	; 205
 21c:	bc ec       	ldi	r27, 0xCC	; 204
 21e:	24 d3       	rcall	.+1608   	; 0x868 <__umulhisi3>
 220:	96 95       	lsr	r25
 222:	87 95       	ror	r24
 224:	96 95       	lsr	r25
 226:	87 95       	ror	r24
 228:	96 95       	lsr	r25
 22a:	87 95       	ror	r24
 22c:	9c 01       	movw	r18, r24
 22e:	22 0f       	add	r18, r18
 230:	33 1f       	adc	r19, r19
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	82 0f       	add	r24, r18
 240:	93 1f       	adc	r25, r19
 242:	9e 01       	movw	r18, r28
 244:	28 1b       	sub	r18, r24
 246:	39 0b       	sbc	r19, r25
 248:	20 93 a6 03 	sts	0x03A6, r18	; 0x8003a6 <digitVal_3>
	if ((number < 1000) && (f !=1000)){
 24c:	48 3e       	cpi	r20, 0xE8	; 232
 24e:	33 e0       	ldi	r19, 0x03	; 3
 250:	53 07       	cpc	r21, r19
 252:	40 f4       	brcc	.+16     	; 0x264 <__EEPROM_REGION_LENGTH__+0x64>
 254:	e8 3e       	cpi	r30, 0xE8	; 232
 256:	83 e0       	ldi	r24, 0x03	; 3
 258:	f8 07       	cpc	r31, r24
 25a:	21 f0       	breq	.+8      	; 0x264 <__EEPROM_REGION_LENGTH__+0x64>
		digitVal_4 = 10; // mean do not display
 25c:	8a e0       	ldi	r24, 0x0A	; 10
 25e:	80 93 a5 03 	sts	0x03A5, r24	; 0x8003a5 <digitVal_4>
 262:	2b c0       	rjmp	.+86     	; 0x2ba <__EEPROM_REGION_LENGTH__+0xba>
	} else{
		digitVal_4 = (number /1000) % 10;
 264:	9a 01       	movw	r18, r20
 266:	36 95       	lsr	r19
 268:	27 95       	ror	r18
 26a:	36 95       	lsr	r19
 26c:	27 95       	ror	r18
 26e:	36 95       	lsr	r19
 270:	27 95       	ror	r18
 272:	a5 ec       	ldi	r26, 0xC5	; 197
 274:	b0 e2       	ldi	r27, 0x20	; 32
 276:	f8 d2       	rcall	.+1520   	; 0x868 <__umulhisi3>
 278:	ac 01       	movw	r20, r24
 27a:	52 95       	swap	r21
 27c:	42 95       	swap	r20
 27e:	4f 70       	andi	r20, 0x0F	; 15
 280:	45 27       	eor	r20, r21
 282:	5f 70       	andi	r21, 0x0F	; 15
 284:	45 27       	eor	r20, r21
 286:	9a 01       	movw	r18, r20
 288:	ad ec       	ldi	r26, 0xCD	; 205
 28a:	bc ec       	ldi	r27, 0xCC	; 204
 28c:	ed d2       	rcall	.+1498   	; 0x868 <__umulhisi3>
 28e:	96 95       	lsr	r25
 290:	87 95       	ror	r24
 292:	96 95       	lsr	r25
 294:	87 95       	ror	r24
 296:	96 95       	lsr	r25
 298:	87 95       	ror	r24
 29a:	9c 01       	movw	r18, r24
 29c:	22 0f       	add	r18, r18
 29e:	33 1f       	adc	r19, r19
 2a0:	88 0f       	add	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	88 0f       	add	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	88 0f       	add	r24, r24
 2aa:	99 1f       	adc	r25, r25
 2ac:	82 0f       	add	r24, r18
 2ae:	93 1f       	adc	r25, r19
 2b0:	9a 01       	movw	r18, r20
 2b2:	28 1b       	sub	r18, r24
 2b4:	39 0b       	sbc	r19, r25
 2b6:	20 93 a5 03 	sts	0x03A5, r18	; 0x8003a5 <digitVal_4>
	}
	
	if (f == 1){
 2ba:	e1 30       	cpi	r30, 0x01	; 1
 2bc:	f1 05       	cpc	r31, r1
 2be:	19 f4       	brne	.+6      	; 0x2c6 <__EEPROM_REGION_LENGTH__+0xc6>
		pointIdx = 0;
 2c0:	10 92 a4 03 	sts	0x03A4, r1	; 0x8003a4 <pointIdx>
 2c4:	14 c0       	rjmp	.+40     	; 0x2ee <__EEPROM_REGION_LENGTH__+0xee>
	} else if (f == 10) {
 2c6:	ea 30       	cpi	r30, 0x0A	; 10
 2c8:	f1 05       	cpc	r31, r1
 2ca:	21 f4       	brne	.+8      	; 0x2d4 <__EEPROM_REGION_LENGTH__+0xd4>
		pointIdx = 2;
 2cc:	82 e0       	ldi	r24, 0x02	; 2
 2ce:	80 93 a4 03 	sts	0x03A4, r24	; 0x8003a4 <pointIdx>
 2d2:	0d c0       	rjmp	.+26     	; 0x2ee <__EEPROM_REGION_LENGTH__+0xee>
	} else if (f == 100) {
 2d4:	e4 36       	cpi	r30, 0x64	; 100
 2d6:	f1 05       	cpc	r31, r1
 2d8:	21 f4       	brne	.+8      	; 0x2e2 <__EEPROM_REGION_LENGTH__+0xe2>
		pointIdx = 3;
 2da:	83 e0       	ldi	r24, 0x03	; 3
 2dc:	80 93 a4 03 	sts	0x03A4, r24	; 0x8003a4 <pointIdx>
 2e0:	06 c0       	rjmp	.+12     	; 0x2ee <__EEPROM_REGION_LENGTH__+0xee>
	} else if (f == 1000) {
 2e2:	e8 3e       	cpi	r30, 0xE8	; 232
 2e4:	f3 40       	sbci	r31, 0x03	; 3
 2e6:	19 f4       	brne	.+6      	; 0x2ee <__EEPROM_REGION_LENGTH__+0xee>
		pointIdx = 4;
 2e8:	84 e0       	ldi	r24, 0x04	; 4
 2ea:	80 93 a4 03 	sts	0x03A4, r24	; 0x8003a4 <pointIdx>
	}
}
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	08 95       	ret

000002f4 <_Z8setPulsejj>:
	setDisplay(freq, factor);
	setPulse(freq, factor);
}

void setPulse(unsigned int _freq, unsigned int _factor)
{
 2f4:	8f 92       	push	r8
 2f6:	9f 92       	push	r9
 2f8:	af 92       	push	r10
 2fa:	bf 92       	push	r11
 2fc:	ff 92       	push	r15
 2fe:	0f 93       	push	r16
 300:	1f 93       	push	r17
 302:	cf 93       	push	r28
 304:	df 93       	push	r29
 306:	eb 01       	movw	r28, r22
	uint16_t _freq_tmp =  _freq/10;
 308:	9c 01       	movw	r18, r24
 30a:	ad ec       	ldi	r26, 0xCD	; 205
 30c:	bc ec       	ldi	r27, 0xCC	; 204
 30e:	ac d2       	rcall	.+1368   	; 0x868 <__umulhisi3>
 310:	fc 01       	movw	r30, r24
 312:	f6 95       	lsr	r31
 314:	e7 95       	ror	r30
 316:	f6 95       	lsr	r31
 318:	e7 95       	ror	r30
 31a:	f6 95       	lsr	r31
 31c:	e7 95       	ror	r30
	K = (800000 * _factor)  / (201 * _freq_tmp);
 31e:	de 01       	movw	r26, r28
 320:	20 e0       	ldi	r18, 0x00	; 0
 322:	35 e3       	ldi	r19, 0x35	; 53
 324:	4c e0       	ldi	r20, 0x0C	; 12
 326:	50 e0       	ldi	r21, 0x00	; 0
 328:	ab d2       	rcall	.+1366   	; 0x880 <__muluhisi3>
 32a:	49 ec       	ldi	r20, 0xC9	; 201
 32c:	4e 9f       	mul	r20, r30
 32e:	90 01       	movw	r18, r0
 330:	4f 9f       	mul	r20, r31
 332:	30 0d       	add	r19, r0
 334:	11 24       	eor	r1, r1
 336:	40 e0       	ldi	r20, 0x00	; 0
 338:	50 e0       	ldi	r21, 0x00	; 0
 33a:	7a d2       	rcall	.+1268   	; 0x830 <__divmodsi4>
 33c:	82 2e       	mov	r8, r18
 33e:	93 2e       	mov	r9, r19
 340:	a4 2e       	mov	r10, r20
 342:	b5 2e       	mov	r11, r21
 344:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <K>
 348:	30 93 63 00 	sts	0x0063, r19	; 0x800063 <K+0x1>
 34c:	40 93 64 00 	sts	0x0064, r20	; 0x800064 <K+0x2>
 350:	50 93 65 00 	sts	0x0065, r21	; 0x800065 <K+0x3>
	
	if (K < 200) {
 354:	88 ec       	ldi	r24, 0xC8	; 200
 356:	88 16       	cp	r8, r24
 358:	91 04       	cpc	r9, r1
 35a:	a1 04       	cpc	r10, r1
 35c:	b1 04       	cpc	r11, r1
 35e:	18 f4       	brcc	.+6      	; 0x366 <_Z8setPulsejj+0x72>
		N = K;
 360:	20 93 4b 01 	sts	0x014B, r18	; 0x80014b <N>
 364:	03 c0       	rjmp	.+6      	; 0x36c <_Z8setPulsejj+0x78>
	} else {
		N = 200;
 366:	88 ec       	ldi	r24, 0xC8	; 200
 368:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <N>
	}
	
	if (_factor == 1000) factor_scale = 10;
 36c:	c8 3e       	cpi	r28, 0xE8	; 232
 36e:	d3 40       	sbci	r29, 0x03	; 3
 370:	41 f4       	brne	.+16     	; 0x382 <_Z8setPulsejj+0x8e>
 372:	8a e0       	ldi	r24, 0x0A	; 10
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 37a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	setDisplay(freq, factor);
	setPulse(freq, factor);
}

void setPulse(unsigned int _freq, unsigned int _factor)
{
 37e:	f1 2c       	mov	r15, r1
 380:	07 c0       	rjmp	.+14     	; 0x390 <_Z8setPulsejj+0x9c>
	} else {
		N = 200;
	}
	
	if (_factor == 1000) factor_scale = 10;
	else factor_scale = 1;
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 38a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 38e:	f7 cf       	rjmp	.-18     	; 0x37e <_Z8setPulsejj+0x8a>
	
	for (uint8_t i = 0; i < N; i++) {
 390:	c0 91 4b 01 	lds	r28, 0x014B	; 0x80014b <N>
 394:	fc 16       	cp	r15, r28
 396:	50 f5       	brcc	.+84     	; 0x3ec <_Z8setPulsejj+0xf8>
		f_time[i] = K * i / (N * factor_scale);
 398:	0f 2d       	mov	r16, r15
 39a:	10 e0       	ldi	r17, 0x00	; 0
 39c:	d8 01       	movw	r26, r16
 39e:	a5 01       	movw	r20, r10
 3a0:	94 01       	movw	r18, r8
 3a2:	6e d2       	rcall	.+1244   	; 0x880 <__muluhisi3>
 3a4:	d0 e0       	ldi	r29, 0x00	; 0
 3a6:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3aa:	50 91 61 00 	lds	r21, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 3ae:	c4 9f       	mul	r28, r20
 3b0:	90 01       	movw	r18, r0
 3b2:	c5 9f       	mul	r28, r21
 3b4:	30 0d       	add	r19, r0
 3b6:	d4 9f       	mul	r29, r20
 3b8:	30 0d       	add	r19, r0
 3ba:	11 24       	eor	r1, r1
 3bc:	40 e0       	ldi	r20, 0x00	; 0
 3be:	50 e0       	ldi	r21, 0x00	; 0
 3c0:	15 d2       	rcall	.+1066   	; 0x7ec <__udivmodsi4>
 3c2:	f8 01       	movw	r30, r16
 3c4:	ee 0f       	add	r30, r30
 3c6:	ff 1f       	adc	r31, r31
 3c8:	ec 5e       	subi	r30, 0xEC	; 236
 3ca:	fd 4f       	sbci	r31, 0xFD	; 253
 3cc:	31 83       	std	Z+1, r19	; 0x01
 3ce:	20 83       	st	Z, r18
		f_cycleId[i] = uint16_t(i * 200) / N;
 3d0:	28 ec       	ldi	r18, 0xC8	; 200
 3d2:	20 9f       	mul	r18, r16
 3d4:	c0 01       	movw	r24, r0
 3d6:	21 9f       	mul	r18, r17
 3d8:	90 0d       	add	r25, r0
 3da:	11 24       	eor	r1, r1
 3dc:	be 01       	movw	r22, r28
 3de:	f2 d1       	rcall	.+996    	; 0x7c4 <__udivmodhi4>
 3e0:	f8 01       	movw	r30, r16
 3e2:	e4 5b       	subi	r30, 0xB4	; 180
 3e4:	fe 4f       	sbci	r31, 0xFE	; 254
 3e6:	60 83       	st	Z, r22
	}
	
	if (_factor == 1000) factor_scale = 10;
	else factor_scale = 1;
	
	for (uint8_t i = 0; i < N; i++) {
 3e8:	f3 94       	inc	r15
 3ea:	d2 cf       	rjmp	.-92     	; 0x390 <_Z8setPulsejj+0x9c>
		f_time[i] = K * i / (N * factor_scale);
		f_cycleId[i] = uint16_t(i * 200) / N;
	}
}
 3ec:	df 91       	pop	r29
 3ee:	cf 91       	pop	r28
 3f0:	1f 91       	pop	r17
 3f2:	0f 91       	pop	r16
 3f4:	ff 90       	pop	r15
 3f6:	bf 90       	pop	r11
 3f8:	af 90       	pop	r10
 3fa:	9f 90       	pop	r9
 3fc:	8f 90       	pop	r8
 3fe:	08 95       	ret

00000400 <_Z6updatev>:
	}
}

void update(void)
{
	setDisplay(freq, factor);
 400:	60 91 39 01 	lds	r22, 0x0139	; 0x800139 <factor>
 404:	70 91 3a 01 	lds	r23, 0x013A	; 0x80013a <factor+0x1>
 408:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <freq>
 40c:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <freq+0x1>
 410:	b9 de       	rcall	.-654    	; 0x184 <_Z10setDisplayjj>
	setPulse(freq, factor);
 412:	60 91 39 01 	lds	r22, 0x0139	; 0x800139 <factor>
 416:	70 91 3a 01 	lds	r23, 0x013A	; 0x80013a <factor+0x1>
 41a:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <freq>
 41e:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <freq+0x1>
 422:	68 df       	rcall	.-304    	; 0x2f4 <_Z8setPulsejj>
 424:	08 95       	ret

00000426 <_Z12increaseFreqv>:
	}
}

void increaseFreq(void)
{
	if (freq < 1000) {
 426:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <freq>
 42a:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <freq+0x1>
 42e:	88 3e       	cpi	r24, 0xE8	; 232
 430:	23 e0       	ldi	r18, 0x03	; 3
 432:	92 07       	cpc	r25, r18
 434:	30 f4       	brcc	.+12     	; 0x442 <_Z12increaseFreqv+0x1c>
		freq += 10;
 436:	0a 96       	adiw	r24, 0x0a	; 10
 438:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <freq+0x1>
 43c:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <freq>
		update();
 440:	df df       	rcall	.-66     	; 0x400 <_Z6updatev>
 442:	08 95       	ret

00000444 <_Z12decreaseFreqv>:
	}
}

void decreaseFreq(void)
{
	if (freq > 100) {
 444:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <freq>
 448:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <freq+0x1>
 44c:	85 36       	cpi	r24, 0x65	; 101
 44e:	91 05       	cpc	r25, r1
 450:	30 f0       	brcs	.+12     	; 0x45e <_Z12decreaseFreqv+0x1a>
		freq -= 10;
 452:	0a 97       	sbiw	r24, 0x0a	; 10
 454:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <freq+0x1>
 458:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <freq>
		update();
 45c:	d1 df       	rcall	.-94     	; 0x400 <_Z6updatev>
 45e:	08 95       	ret

00000460 <_Z9resetFreqv>:
	}
}

void resetFreq(void)
{
	freq = minRange;
 460:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <minRange>
 464:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <minRange+0x1>
 468:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <freq+0x1>
 46c:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <freq>
	update();
 470:	c7 df       	rcall	.-114    	; 0x400 <_Z6updatev>
 472:	08 95       	ret

00000474 <_Z9readRangev>:
}

void readRange(void)
{
	unsigned int newFactor;
	if (RANGE_1 && RANGE_2){
 474:	b3 99       	sbic	0x16, 3	; 22
 476:	04 c0       	rjmp	.+8      	; 0x480 <_Z9readRangev+0xc>
 478:	b4 9b       	sbis	0x16, 4	; 22
 47a:	04 c0       	rjmp	.+8      	; 0x484 <_Z9readRangev+0x10>
 47c:	80 e0       	ldi	r24, 0x00	; 0
 47e:	03 c0       	rjmp	.+6      	; 0x486 <_Z9readRangev+0x12>
 480:	80 e0       	ldi	r24, 0x00	; 0
 482:	01 c0       	rjmp	.+2      	; 0x486 <_Z9readRangev+0x12>
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	81 11       	cpse	r24, r1
 488:	07 c0       	rjmp	.+14     	; 0x498 <_Z9readRangev+0x24>
		newFactor = 1000;
	} else if (RANGE_1)
 48a:	b3 9b       	sbis	0x16, 3	; 22
 48c:	08 c0       	rjmp	.+16     	; 0x49e <_Z9readRangev+0x2a>
	{
		newFactor = 100;
	} else if (RANGE_2)
 48e:	b4 99       	sbic	0x16, 4	; 22
 490:	09 c0       	rjmp	.+18     	; 0x4a4 <_Z9readRangev+0x30>
	{
		newFactor = 10;
 492:	2a e0       	ldi	r18, 0x0A	; 10
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	08 c0       	rjmp	.+16     	; 0x4a8 <_Z9readRangev+0x34>

void readRange(void)
{
	unsigned int newFactor;
	if (RANGE_1 && RANGE_2){
		newFactor = 1000;
 498:	28 ee       	ldi	r18, 0xE8	; 232
 49a:	33 e0       	ldi	r19, 0x03	; 3
 49c:	05 c0       	rjmp	.+10     	; 0x4a8 <_Z9readRangev+0x34>
	} else if (RANGE_1)
	{
		newFactor = 100;
 49e:	24 e6       	ldi	r18, 0x64	; 100
 4a0:	30 e0       	ldi	r19, 0x00	; 0
 4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <_Z9readRangev+0x34>
	} else if (RANGE_2)
	{
		newFactor = 10;
	} else {
		newFactor = 1;
 4a4:	21 e0       	ldi	r18, 0x01	; 1
 4a6:	30 e0       	ldi	r19, 0x00	; 0
	}
	
	if (newFactor != factor) {
 4a8:	60 91 39 01 	lds	r22, 0x0139	; 0x800139 <factor>
 4ac:	70 91 3a 01 	lds	r23, 0x013A	; 0x80013a <factor+0x1>
 4b0:	26 17       	cp	r18, r22
 4b2:	37 07       	cpc	r19, r23
 4b4:	b1 f1       	breq	.+108    	; 0x522 <_Z9readRangev+0xae>
		unsigned int newFreq;
		if (newFactor > factor) {
 4b6:	62 17       	cp	r22, r18
 4b8:	73 07       	cpc	r23, r19
 4ba:	70 f4       	brcc	.+28     	; 0x4d8 <_Z9readRangev+0x64>
			newFreq = freq * (newFactor / factor);
 4bc:	c9 01       	movw	r24, r18
 4be:	82 d1       	rcall	.+772    	; 0x7c4 <__udivmodhi4>
 4c0:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <freq>
 4c4:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <freq+0x1>
 4c8:	68 9f       	mul	r22, r24
 4ca:	a0 01       	movw	r20, r0
 4cc:	69 9f       	mul	r22, r25
 4ce:	50 0d       	add	r21, r0
 4d0:	78 9f       	mul	r23, r24
 4d2:	50 0d       	add	r21, r0
 4d4:	11 24       	eor	r1, r1
 4d6:	0d c0       	rjmp	.+26     	; 0x4f2 <_Z9readRangev+0x7e>
		} else {
			newFreq = freq * newFactor / factor;
 4d8:	40 91 3b 01 	lds	r20, 0x013B	; 0x80013b <freq>
 4dc:	50 91 3c 01 	lds	r21, 0x013C	; 0x80013c <freq+0x1>
 4e0:	24 9f       	mul	r18, r20
 4e2:	c0 01       	movw	r24, r0
 4e4:	25 9f       	mul	r18, r21
 4e6:	90 0d       	add	r25, r0
 4e8:	34 9f       	mul	r19, r20
 4ea:	90 0d       	add	r25, r0
 4ec:	11 24       	eor	r1, r1
 4ee:	6a d1       	rcall	.+724    	; 0x7c4 <__udivmodhi4>
 4f0:	ab 01       	movw	r20, r22
		}
		
		if ((newFreq < minRange) || (maxRange < newFreq)) {
 4f2:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <minRange>
 4f6:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <minRange+0x1>
 4fa:	48 17       	cp	r20, r24
 4fc:	59 07       	cpc	r21, r25
 4fe:	40 f0       	brcs	.+16     	; 0x510 <_Z9readRangev+0x9c>
 500:	60 91 3f 01 	lds	r22, 0x013F	; 0x80013f <maxRange>
 504:	70 91 40 01 	lds	r23, 0x0140	; 0x800140 <maxRange+0x1>
 508:	64 17       	cp	r22, r20
 50a:	75 07       	cpc	r23, r21
 50c:	08 f0       	brcs	.+2      	; 0x510 <_Z9readRangev+0x9c>
 50e:	ca 01       	movw	r24, r20
			newFreq = minRange;
		}
		freq = newFreq;
 510:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <freq+0x1>
 514:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <freq>
		factor = newFactor;
 518:	30 93 3a 01 	sts	0x013A, r19	; 0x80013a <factor+0x1>
 51c:	20 93 39 01 	sts	0x0139, r18	; 0x800139 <factor>
		update();
 520:	6f df       	rcall	.-290    	; 0x400 <_Z6updatev>
 522:	08 95       	ret

00000524 <_Z10readButtonv>:
	DDRC &= ~((1 << DDRC5) | (1 << DDRC4));
	PORTC |= (1 << PORTC5) | (1 << PORTC4);
}

void readButton(void)
{
 524:	cf 93       	push	r28
 526:	df 93       	push	r29
	readRange();
 528:	a5 df       	rcall	.-182    	; 0x474 <_Z9readRangev>
	if (isDownPress) {
 52a:	9d 99       	sbic	0x13, 5	; 19
 52c:	37 c0       	rjmp	.+110    	; 0x59c <_Z10readButtonv+0x78>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 52e:	83 ed       	ldi	r24, 0xD3	; 211
 530:	90 e3       	ldi	r25, 0x30	; 48
 532:	01 97       	sbiw	r24, 0x01	; 1
 534:	f1 f7       	brne	.-4      	; 0x532 <_Z10readButtonv+0xe>
 536:	00 c0       	rjmp	.+0      	; 0x538 <_Z10readButtonv+0x14>
 538:	00 00       	nop
		_delay_ms(50);
		int cnt = 0;
		bool isLongPress = false;
 53a:	30 e0       	ldi	r19, 0x00	; 0
void readButton(void)
{
	readRange();
	if (isDownPress) {
		_delay_ms(50);
		int cnt = 0;
 53c:	80 e0       	ldi	r24, 0x00	; 0
 53e:	90 e0       	ldi	r25, 0x00	; 0
		bool isLongPress = false;
		while (isDownPress && (cnt < 25)) {
 540:	9d 99       	sbic	0x13, 5	; 19
 542:	05 c0       	rjmp	.+10     	; 0x54e <_Z10readButtonv+0x2a>
 544:	89 31       	cpi	r24, 0x19	; 25
 546:	91 05       	cpc	r25, r1
 548:	24 f0       	brlt	.+8      	; 0x552 <_Z10readButtonv+0x2e>
 54a:	20 e0       	ldi	r18, 0x00	; 0
 54c:	03 c0       	rjmp	.+6      	; 0x554 <_Z10readButtonv+0x30>
 54e:	20 e0       	ldi	r18, 0x00	; 0
 550:	01 c0       	rjmp	.+2      	; 0x554 <_Z10readButtonv+0x30>
 552:	21 e0       	ldi	r18, 0x01	; 1
 554:	22 23       	and	r18, r18
 556:	61 f0       	breq	.+24     	; 0x570 <_Z10readButtonv+0x4c>
			cnt++;
 558:	01 96       	adiw	r24, 0x01	; 1
			if (cnt == 25){
 55a:	89 31       	cpi	r24, 0x19	; 25
 55c:	91 05       	cpc	r25, r1
 55e:	09 f4       	brne	.+2      	; 0x562 <_Z10readButtonv+0x3e>
				isLongPress = true;
 560:	31 e0       	ldi	r19, 0x01	; 1
 562:	e3 ed       	ldi	r30, 0xD3	; 211
 564:	f0 e3       	ldi	r31, 0x30	; 48
 566:	31 97       	sbiw	r30, 0x01	; 1
 568:	f1 f7       	brne	.-4      	; 0x566 <_Z10readButtonv+0x42>
 56a:	00 c0       	rjmp	.+0      	; 0x56c <_Z10readButtonv+0x48>
 56c:	00 00       	nop
 56e:	e8 cf       	rjmp	.-48     	; 0x540 <_Z10readButtonv+0x1c>
			}
			_delay_ms(50);
		}
		
		if (isLongPress){
 570:	33 23       	and	r19, r19
 572:	91 f0       	breq	.+36     	; 0x598 <_Z10readButtonv+0x74>
 574:	c0 e0       	ldi	r28, 0x00	; 0
 576:	d0 e0       	ldi	r29, 0x00	; 0
			cnt = 0;
			while(isDownPress) {
 578:	9d 99       	sbic	0x13, 5	; 19
 57a:	10 c0       	rjmp	.+32     	; 0x59c <_Z10readButtonv+0x78>
				cnt++;
 57c:	21 96       	adiw	r28, 0x01	; 1
				if (cnt % 4 == 0) {
 57e:	ce 01       	movw	r24, r28
 580:	83 70       	andi	r24, 0x03	; 3
 582:	99 27       	eor	r25, r25
 584:	89 2b       	or	r24, r25
 586:	09 f4       	brne	.+2      	; 0x58a <_Z10readButtonv+0x66>
					decreaseFreq();
 588:	5d df       	rcall	.-326    	; 0x444 <_Z12decreaseFreqv>
 58a:	83 ed       	ldi	r24, 0xD3	; 211
 58c:	90 e3       	ldi	r25, 0x30	; 48
 58e:	01 97       	sbiw	r24, 0x01	; 1
 590:	f1 f7       	brne	.-4      	; 0x58e <_Z10readButtonv+0x6a>
 592:	00 c0       	rjmp	.+0      	; 0x594 <_Z10readButtonv+0x70>
 594:	00 00       	nop
 596:	f0 cf       	rjmp	.-32     	; 0x578 <_Z10readButtonv+0x54>
				}
				_delay_ms(50);
			}
		} else if(!isDownPress) {
 598:	9d 99       	sbic	0x13, 5	; 19
			decreaseFreq();
 59a:	54 df       	rcall	.-344    	; 0x444 <_Z12decreaseFreqv>
		}
	}
	
	if (isUpPress) {
 59c:	9c 99       	sbic	0x13, 4	; 19
 59e:	37 c0       	rjmp	.+110    	; 0x60e <_Z10readButtonv+0xea>
 5a0:	e3 ed       	ldi	r30, 0xD3	; 211
 5a2:	f0 e3       	ldi	r31, 0x30	; 48
 5a4:	31 97       	sbiw	r30, 0x01	; 1
 5a6:	f1 f7       	brne	.-4      	; 0x5a4 <_Z10readButtonv+0x80>
 5a8:	00 c0       	rjmp	.+0      	; 0x5aa <_Z10readButtonv+0x86>
 5aa:	00 00       	nop
		_delay_ms(50);
		int cnt = 0;
		bool isLongPress = false;
 5ac:	30 e0       	ldi	r19, 0x00	; 0
		}
	}
	
	if (isUpPress) {
		_delay_ms(50);
		int cnt = 0;
 5ae:	80 e0       	ldi	r24, 0x00	; 0
 5b0:	90 e0       	ldi	r25, 0x00	; 0
		bool isLongPress = false;
		while (isUpPress && (cnt < 25)) {
 5b2:	9c 99       	sbic	0x13, 4	; 19
 5b4:	05 c0       	rjmp	.+10     	; 0x5c0 <_Z10readButtonv+0x9c>
 5b6:	89 31       	cpi	r24, 0x19	; 25
 5b8:	91 05       	cpc	r25, r1
 5ba:	24 f0       	brlt	.+8      	; 0x5c4 <_Z10readButtonv+0xa0>
 5bc:	20 e0       	ldi	r18, 0x00	; 0
 5be:	03 c0       	rjmp	.+6      	; 0x5c6 <_Z10readButtonv+0xa2>
 5c0:	20 e0       	ldi	r18, 0x00	; 0
 5c2:	01 c0       	rjmp	.+2      	; 0x5c6 <_Z10readButtonv+0xa2>
 5c4:	21 e0       	ldi	r18, 0x01	; 1
 5c6:	22 23       	and	r18, r18
 5c8:	61 f0       	breq	.+24     	; 0x5e2 <_Z10readButtonv+0xbe>
			cnt++;
 5ca:	01 96       	adiw	r24, 0x01	; 1
			if (cnt == 25){
 5cc:	89 31       	cpi	r24, 0x19	; 25
 5ce:	91 05       	cpc	r25, r1
 5d0:	09 f4       	brne	.+2      	; 0x5d4 <_Z10readButtonv+0xb0>
				isLongPress = true;
 5d2:	31 e0       	ldi	r19, 0x01	; 1
 5d4:	e3 ed       	ldi	r30, 0xD3	; 211
 5d6:	f0 e3       	ldi	r31, 0x30	; 48
 5d8:	31 97       	sbiw	r30, 0x01	; 1
 5da:	f1 f7       	brne	.-4      	; 0x5d8 <_Z10readButtonv+0xb4>
 5dc:	00 c0       	rjmp	.+0      	; 0x5de <_Z10readButtonv+0xba>
 5de:	00 00       	nop
 5e0:	e8 cf       	rjmp	.-48     	; 0x5b2 <_Z10readButtonv+0x8e>
			}
			_delay_ms(50);
		}
			
		if (isLongPress){
 5e2:	33 23       	and	r19, r19
 5e4:	91 f0       	breq	.+36     	; 0x60a <_Z10readButtonv+0xe6>
 5e6:	c0 e0       	ldi	r28, 0x00	; 0
 5e8:	d0 e0       	ldi	r29, 0x00	; 0
			cnt = 0;
			while(isUpPress) {
 5ea:	9c 99       	sbic	0x13, 4	; 19
 5ec:	10 c0       	rjmp	.+32     	; 0x60e <_Z10readButtonv+0xea>
				cnt++;
 5ee:	21 96       	adiw	r28, 0x01	; 1
				if (cnt % 4 == 0) {
 5f0:	ce 01       	movw	r24, r28
 5f2:	83 70       	andi	r24, 0x03	; 3
 5f4:	99 27       	eor	r25, r25
 5f6:	89 2b       	or	r24, r25
 5f8:	09 f4       	brne	.+2      	; 0x5fc <_Z10readButtonv+0xd8>
					increaseFreq();
 5fa:	15 df       	rcall	.-470    	; 0x426 <_Z12increaseFreqv>
 5fc:	83 ed       	ldi	r24, 0xD3	; 211
 5fe:	90 e3       	ldi	r25, 0x30	; 48
 600:	01 97       	sbiw	r24, 0x01	; 1
 602:	f1 f7       	brne	.-4      	; 0x600 <_Z10readButtonv+0xdc>
 604:	00 c0       	rjmp	.+0      	; 0x606 <_Z10readButtonv+0xe2>
 606:	00 00       	nop
 608:	f0 cf       	rjmp	.-32     	; 0x5ea <_Z10readButtonv+0xc6>
				}
				_delay_ms(50);
			}
			} else if(!isUpPress) {
 60a:	9c 99       	sbic	0x13, 4	; 19
			increaseFreq();
 60c:	0c df       	rcall	.-488    	; 0x426 <_Z12increaseFreqv>
		}
	}
	
	if (isRestPress) {
 60e:	b0 99       	sbic	0x16, 0	; 22
 610:	08 c0       	rjmp	.+16     	; 0x622 <_Z10readButtonv+0xfe>
 612:	e3 ed       	ldi	r30, 0xD3	; 211
 614:	f0 e3       	ldi	r31, 0x30	; 48
 616:	31 97       	sbiw	r30, 0x01	; 1
 618:	f1 f7       	brne	.-4      	; 0x616 <_Z10readButtonv+0xf2>
 61a:	00 c0       	rjmp	.+0      	; 0x61c <_Z10readButtonv+0xf8>
 61c:	00 00       	nop
		_delay_ms(50);
        if (isRestPress){
 61e:	b0 9b       	sbis	0x16, 0	; 22
	       resetFreq();
 620:	1f df       	rcall	.-450    	; 0x460 <_Z9resetFreqv>
		}
	}
}
 622:	df 91       	pop	r29
 624:	cf 91       	pop	r28
 626:	08 95       	ret

00000628 <main>:
void update(void);
void setPulse(unsigned int _freq, unsigned int _factor);

int main(void)
{
	init_GPIO();
 628:	39 dd       	rcall	.-1422   	; 0x9c <_Z9init_GPIOv>
	
	readRange();
 62a:	24 df       	rcall	.-440    	; 0x474 <_Z9readRangev>
	update();
 62c:	e9 de       	rcall	.-558    	; 0x400 <_Z6updatev>
		
	init_TC0(); //init timer1 for display
 62e:	17 dd       	rcall	.-1490   	; 0x5e <_Z8init_TC0v>
	init_TC1(); //init timer for pulse output
 630:	1d dd       	rcall	.-1478   	; 0x6c <_Z8init_TC1v>
	    
	//enable interrupt
	sei();
 632:	78 94       	sei
	

    /* Replace with your application code */
    while (1) 
    {
		readButton();
 634:	77 df       	rcall	.-274    	; 0x524 <_Z10readButtonv>
 636:	87 ea       	ldi	r24, 0xA7	; 167
 638:	91 e6       	ldi	r25, 0x61	; 97
 63a:	01 97       	sbiw	r24, 0x01	; 1
 63c:	f1 f7       	brne	.-4      	; 0x63a <main+0x12>
 63e:	00 c0       	rjmp	.+0      	; 0x640 <main+0x18>
 640:	00 00       	nop
 642:	f8 cf       	rjmp	.-16     	; 0x634 <main+0xc>

00000644 <__vector_9>:
		f_cycleId[i] = uint16_t(i * 200) / N;
	}
}

ISR (TIMER0_OVF_vect)
{
 644:	1f 92       	push	r1
 646:	0f 92       	push	r0
 648:	0f b6       	in	r0, 0x3f	; 63
 64a:	0f 92       	push	r0
 64c:	11 24       	eor	r1, r1
 64e:	2f 93       	push	r18
 650:	3f 93       	push	r19
 652:	4f 93       	push	r20
 654:	5f 93       	push	r21
 656:	6f 93       	push	r22
 658:	7f 93       	push	r23
 65a:	8f 93       	push	r24
 65c:	9f 93       	push	r25
 65e:	af 93       	push	r26
 660:	bf 93       	push	r27
 662:	ef 93       	push	r30
 664:	ff 93       	push	r31
	display();
 666:	29 dd       	rcall	.-1454   	; 0xba <_Z7displayv>
}
 668:	ff 91       	pop	r31
 66a:	ef 91       	pop	r30
 66c:	bf 91       	pop	r27
 66e:	af 91       	pop	r26
 670:	9f 91       	pop	r25
 672:	8f 91       	pop	r24
 674:	7f 91       	pop	r23
 676:	6f 91       	pop	r22
 678:	5f 91       	pop	r21
 67a:	4f 91       	pop	r20
 67c:	3f 91       	pop	r19
 67e:	2f 91       	pop	r18
 680:	0f 90       	pop	r0
 682:	0f be       	out	0x3f, r0	; 63
 684:	0f 90       	pop	r0
 686:	1f 90       	pop	r1
 688:	18 95       	reti

0000068a <__vector_8>:

ISR (TIMER1_OVF_vect)
{	
 68a:	1f 92       	push	r1
 68c:	0f 92       	push	r0
 68e:	0f b6       	in	r0, 0x3f	; 63
 690:	0f 92       	push	r0
 692:	11 24       	eor	r1, r1
 694:	2f 93       	push	r18
 696:	3f 93       	push	r19
 698:	4f 93       	push	r20
 69a:	5f 93       	push	r21
 69c:	6f 93       	push	r22
 69e:	7f 93       	push	r23
 6a0:	8f 93       	push	r24
 6a2:	9f 93       	push	r25
 6a4:	af 93       	push	r26
 6a6:	bf 93       	push	r27
 6a8:	ef 93       	push	r30
 6aa:	ff 93       	push	r31
	timeIdx++;
 6ac:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <timeIdx>
 6b0:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <timeIdx+0x1>
 6b4:	a0 91 48 01 	lds	r26, 0x0148	; 0x800148 <timeIdx+0x2>
 6b8:	b0 91 49 01 	lds	r27, 0x0149	; 0x800149 <timeIdx+0x3>
 6bc:	01 96       	adiw	r24, 0x01	; 1
 6be:	a1 1d       	adc	r26, r1
 6c0:	b1 1d       	adc	r27, r1
 6c2:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <timeIdx>
 6c6:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <timeIdx+0x1>
 6ca:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <timeIdx+0x2>
 6ce:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <timeIdx+0x3>
	if (timeIdx >= K) {
 6d2:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <K>
 6d6:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <K+0x1>
 6da:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <K+0x2>
 6de:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <K+0x3>
 6e2:	84 17       	cp	r24, r20
 6e4:	95 07       	cpc	r25, r21
 6e6:	a6 07       	cpc	r26, r22
 6e8:	b7 07       	cpc	r27, r23
 6ea:	b8 f0       	brcs	.+46     	; 0x71a <__vector_8+0x90>
		timeIdx = 0;
 6ec:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <timeIdx>
 6f0:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <timeIdx+0x1>
 6f4:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <timeIdx+0x2>
 6f8:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <timeIdx+0x3>
		idx = 0;
 6fc:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <idx>
		cnt_cycle = 0;
 700:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <cnt_cycle+0x1>
 704:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <cnt_cycle>
		time_scale = 0;
 708:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <__data_end+0x1>
 70c:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <__data_end>
		OCR1A = f_sin[0];
 710:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <f_sin>
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	9b bd       	out	0x2b, r25	; 43
 718:	8a bd       	out	0x2a, r24	; 42
	}
	
	if (cnt_cycle == factor_scale) {
 71a:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <cnt_cycle>
 71e:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <cnt_cycle+0x1>
 722:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 726:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 72a:	28 17       	cp	r18, r24
 72c:	39 07       	cpc	r19, r25
 72e:	81 f5       	brne	.+96     	; 0x790 <__vector_8+0x106>
		cnt_cycle = 0;
 730:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <cnt_cycle+0x1>
 734:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <cnt_cycle>
		time_scale++;
 738:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <__data_end>
 73c:	30 91 43 01 	lds	r19, 0x0143	; 0x800143 <__data_end+0x1>
 740:	2f 5f       	subi	r18, 0xFF	; 255
 742:	3f 4f       	sbci	r19, 0xFF	; 255
 744:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__data_end+0x1>
 748:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <__data_end>
		uint8_t idxNext = idx + 1;
 74c:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <idx>
 750:	8f 5f       	subi	r24, 0xFF	; 255
		if (idxNext >= N) idxNext = N - 1;
 752:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <N>
 756:	89 17       	cp	r24, r25
 758:	10 f0       	brcs	.+4      	; 0x75e <__vector_8+0xd4>
 75a:	8f ef       	ldi	r24, 0xFF	; 255
 75c:	89 0f       	add	r24, r25
		if (time_scale >= f_time[idxNext]) {
 75e:	48 2f       	mov	r20, r24
 760:	50 e0       	ldi	r21, 0x00	; 0
 762:	fa 01       	movw	r30, r20
 764:	ee 0f       	add	r30, r30
 766:	ff 1f       	adc	r31, r31
 768:	ec 5e       	subi	r30, 0xEC	; 236
 76a:	fd 4f       	sbci	r31, 0xFD	; 253
 76c:	60 81       	ld	r22, Z
 76e:	71 81       	ldd	r23, Z+1	; 0x01
 770:	26 17       	cp	r18, r22
 772:	37 07       	cpc	r19, r23
 774:	68 f0       	brcs	.+26     	; 0x790 <__vector_8+0x106>
			idx = idxNext;
 776:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <idx>
			uint8_t cycleIdx = f_cycleId[idx];
 77a:	fa 01       	movw	r30, r20
 77c:	e4 5b       	subi	r30, 0xB4	; 180
 77e:	fe 4f       	sbci	r31, 0xFE	; 254
 780:	e0 81       	ld	r30, Z
			uint8_t cycle = f_sin[cycleIdx];
 782:	f0 e0       	ldi	r31, 0x00	; 0
 784:	ea 59       	subi	r30, 0x9A	; 154
 786:	ff 4f       	sbci	r31, 0xFF	; 255
 788:	80 81       	ld	r24, Z
			OCR1A = cycle;
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	9b bd       	out	0x2b, r25	; 43
 78e:	8a bd       	out	0x2a, r24	; 42
		}
	}
	cnt_cycle++;
 790:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <cnt_cycle>
 794:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <cnt_cycle+0x1>
 798:	01 96       	adiw	r24, 0x01	; 1
 79a:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <cnt_cycle+0x1>
 79e:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <cnt_cycle>
}
 7a2:	ff 91       	pop	r31
 7a4:	ef 91       	pop	r30
 7a6:	bf 91       	pop	r27
 7a8:	af 91       	pop	r26
 7aa:	9f 91       	pop	r25
 7ac:	8f 91       	pop	r24
 7ae:	7f 91       	pop	r23
 7b0:	6f 91       	pop	r22
 7b2:	5f 91       	pop	r21
 7b4:	4f 91       	pop	r20
 7b6:	3f 91       	pop	r19
 7b8:	2f 91       	pop	r18
 7ba:	0f 90       	pop	r0
 7bc:	0f be       	out	0x3f, r0	; 63
 7be:	0f 90       	pop	r0
 7c0:	1f 90       	pop	r1
 7c2:	18 95       	reti

000007c4 <__udivmodhi4>:
 7c4:	aa 1b       	sub	r26, r26
 7c6:	bb 1b       	sub	r27, r27
 7c8:	51 e1       	ldi	r21, 0x11	; 17
 7ca:	07 c0       	rjmp	.+14     	; 0x7da <__udivmodhi4_ep>

000007cc <__udivmodhi4_loop>:
 7cc:	aa 1f       	adc	r26, r26
 7ce:	bb 1f       	adc	r27, r27
 7d0:	a6 17       	cp	r26, r22
 7d2:	b7 07       	cpc	r27, r23
 7d4:	10 f0       	brcs	.+4      	; 0x7da <__udivmodhi4_ep>
 7d6:	a6 1b       	sub	r26, r22
 7d8:	b7 0b       	sbc	r27, r23

000007da <__udivmodhi4_ep>:
 7da:	88 1f       	adc	r24, r24
 7dc:	99 1f       	adc	r25, r25
 7de:	5a 95       	dec	r21
 7e0:	a9 f7       	brne	.-22     	; 0x7cc <__udivmodhi4_loop>
 7e2:	80 95       	com	r24
 7e4:	90 95       	com	r25
 7e6:	bc 01       	movw	r22, r24
 7e8:	cd 01       	movw	r24, r26
 7ea:	08 95       	ret

000007ec <__udivmodsi4>:
 7ec:	a1 e2       	ldi	r26, 0x21	; 33
 7ee:	1a 2e       	mov	r1, r26
 7f0:	aa 1b       	sub	r26, r26
 7f2:	bb 1b       	sub	r27, r27
 7f4:	fd 01       	movw	r30, r26
 7f6:	0d c0       	rjmp	.+26     	; 0x812 <__udivmodsi4_ep>

000007f8 <__udivmodsi4_loop>:
 7f8:	aa 1f       	adc	r26, r26
 7fa:	bb 1f       	adc	r27, r27
 7fc:	ee 1f       	adc	r30, r30
 7fe:	ff 1f       	adc	r31, r31
 800:	a2 17       	cp	r26, r18
 802:	b3 07       	cpc	r27, r19
 804:	e4 07       	cpc	r30, r20
 806:	f5 07       	cpc	r31, r21
 808:	20 f0       	brcs	.+8      	; 0x812 <__udivmodsi4_ep>
 80a:	a2 1b       	sub	r26, r18
 80c:	b3 0b       	sbc	r27, r19
 80e:	e4 0b       	sbc	r30, r20
 810:	f5 0b       	sbc	r31, r21

00000812 <__udivmodsi4_ep>:
 812:	66 1f       	adc	r22, r22
 814:	77 1f       	adc	r23, r23
 816:	88 1f       	adc	r24, r24
 818:	99 1f       	adc	r25, r25
 81a:	1a 94       	dec	r1
 81c:	69 f7       	brne	.-38     	; 0x7f8 <__udivmodsi4_loop>
 81e:	60 95       	com	r22
 820:	70 95       	com	r23
 822:	80 95       	com	r24
 824:	90 95       	com	r25
 826:	9b 01       	movw	r18, r22
 828:	ac 01       	movw	r20, r24
 82a:	bd 01       	movw	r22, r26
 82c:	cf 01       	movw	r24, r30
 82e:	08 95       	ret

00000830 <__divmodsi4>:
 830:	05 2e       	mov	r0, r21
 832:	97 fb       	bst	r25, 7
 834:	16 f4       	brtc	.+4      	; 0x83a <__divmodsi4+0xa>
 836:	00 94       	com	r0
 838:	0f d0       	rcall	.+30     	; 0x858 <__negsi2>
 83a:	57 fd       	sbrc	r21, 7
 83c:	05 d0       	rcall	.+10     	; 0x848 <__divmodsi4_neg2>
 83e:	d6 df       	rcall	.-84     	; 0x7ec <__udivmodsi4>
 840:	07 fc       	sbrc	r0, 7
 842:	02 d0       	rcall	.+4      	; 0x848 <__divmodsi4_neg2>
 844:	46 f4       	brtc	.+16     	; 0x856 <__divmodsi4_exit>
 846:	08 c0       	rjmp	.+16     	; 0x858 <__negsi2>

00000848 <__divmodsi4_neg2>:
 848:	50 95       	com	r21
 84a:	40 95       	com	r20
 84c:	30 95       	com	r19
 84e:	21 95       	neg	r18
 850:	3f 4f       	sbci	r19, 0xFF	; 255
 852:	4f 4f       	sbci	r20, 0xFF	; 255
 854:	5f 4f       	sbci	r21, 0xFF	; 255

00000856 <__divmodsi4_exit>:
 856:	08 95       	ret

00000858 <__negsi2>:
 858:	90 95       	com	r25
 85a:	80 95       	com	r24
 85c:	70 95       	com	r23
 85e:	61 95       	neg	r22
 860:	7f 4f       	sbci	r23, 0xFF	; 255
 862:	8f 4f       	sbci	r24, 0xFF	; 255
 864:	9f 4f       	sbci	r25, 0xFF	; 255
 866:	08 95       	ret

00000868 <__umulhisi3>:
 868:	a2 9f       	mul	r26, r18
 86a:	b0 01       	movw	r22, r0
 86c:	b3 9f       	mul	r27, r19
 86e:	c0 01       	movw	r24, r0
 870:	a3 9f       	mul	r26, r19
 872:	01 d0       	rcall	.+2      	; 0x876 <__umulhisi3+0xe>
 874:	b2 9f       	mul	r27, r18
 876:	70 0d       	add	r23, r0
 878:	81 1d       	adc	r24, r1
 87a:	11 24       	eor	r1, r1
 87c:	91 1d       	adc	r25, r1
 87e:	08 95       	ret

00000880 <__muluhisi3>:
 880:	f3 df       	rcall	.-26     	; 0x868 <__umulhisi3>
 882:	a5 9f       	mul	r26, r21
 884:	90 0d       	add	r25, r0
 886:	b4 9f       	mul	r27, r20
 888:	90 0d       	add	r25, r0
 88a:	a4 9f       	mul	r26, r20
 88c:	80 0d       	add	r24, r0
 88e:	91 1d       	adc	r25, r1
 890:	11 24       	eor	r1, r1
 892:	08 95       	ret

00000894 <_exit>:
 894:	f8 94       	cli

00000896 <__stop_program>:
 896:	ff cf       	rjmp	.-2      	; 0x896 <__stop_program>
